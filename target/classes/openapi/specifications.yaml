openapi: 3.0.1
info:
  title: Agrobook
  description: Agrobook Rest Api.
  version: '1.0'
servers:
  - url: 'http://localhost:5050/agrobook/api'
tags:
  - name: usuario
    description: Endpoints relacionados con los usuarios.
paths:
  /usuarios:
    get:
      tags:
        - usuario
      operationId: listUsuarios
      summary: Listar usuarios
      description: Devuelve una lista de todos los usuarios registrados
      responses:
        200:
          description: Listado de usuarios obtenido correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    post:
      tags:
        - usuario
      operationId: addUsuario
      summary: Crear usuario
      description: Crea un nuevo usuario y devuelve los detalles del usuario creado
      requestBody:
        description: El usuario a crear
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioFields'
        required: true
      responses:
        200:
          description: Usuario creado correctamente.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /usuarios/{idUsuario}:
    get:
      tags:
        - usuario
      operationId: getUsuario
      summary: Obtener usuario
      description: Obtiene los detalles de un usuario según su ID
      parameters:
        - name: idUsuario
          in: path
          description: ID del usuario.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
      responses:
        200:
          description: Listado de usuarios obtenido correctamente
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'    
        304:
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Error de Servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    put:
      tags:
        - usuario
      operationId: updateUsuario
      summary: Actualizar usuario
      description: Actualiza los detalles de un usuario dado su ID.
      parameters:
        - name: idUsuario
          in: path
          description: ID del usuario.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
      requestBody:
        description: Usuario a actualizar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioFields'
        required: true
      responses:
        200:
          description: Usuario actualizado correctamente.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Error de Servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    delete:
      tags:
        - usuario
      operationId: deleteUsuario
      summary: Eliminar usuario
      description: Elimina un usuario del registro dado un ID.
      parameters:
        - name: idUsuario
          in: path
          description: ID del usuario.
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
      responses:
        200:
          description: Usuario eliminado correctamente.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestMessage'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        404:
          description: Not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
components:
  schemas:
    RestMessage:
      title: REST Error
      description: The schema for all error responses.
      type: object
      properties:
        path:
          title: Path
          description: The path of the URL for this request.
          type: string
          format: uri
          example: '/api/usuarios'
          readOnly: true
        timestamp:
          title: Timestamp
          description: The time the error occured.
          type: string
          format: date-time
          example: '2019-08-21T21:41:46.158+0000'
          readOnly: true
        message:
          title: Message
          description: The long error message.
          type: string
          example: 'Request failed schema validation'
          readOnly: true
      required:
      - path
      - timestamp
      - message
    RestError:
      title: REST Error
      description: The schema for all error responses.
      allOf:
        - $ref: '#/components/schemas/RestMessage'
        - type: object
          properties:
            validationErrors:
              title: Schema validation errors
              description: Validation errors against the OpenAPI schema.
              type: array
              items:
                $ref: '#/components/schemas/ValidationMessage'
            trace:
              title: Trace
              description: The stacktrace for this error.
              type: string
              example: 'com.atlassian.oai.validator.springmvc.InvalidRequestException: ...'
              readOnly: true
          required:
            - trace
    ValidationMessage:
      title: Validation message
      description: Messages describing a validation error.
      type: object
      properties:
        field:
          title: Field
          description: The field which dropped the validation error.
          type: string
          example: "name"
          readOnly: true
        message:
          title: Message
          description: The valiation message.
          type: string
          example: "Instance type (null) does not match any allowed primitive type (allowed: ['string'])"
          readOnly: true
      required:
        - field
        - message
      additionalProperties: true
    Usuario:
      title: Usuario
      description: Usuario de la aplicación
      type: object
      allOf:
        - $ref: '#/components/schemas/UsuarioFields'
        - type: object
      properties:
        id:
          title: ID
          description: ID del Usuario
          type: integer
          format: int64
          minimum: 1
          example: 1
          readOnly: true
      required:
        - id
    UsuarioFields:
      title: UsuarioFields
      description: Campos con la información de un usuario
      type: object
      properties:
        username:
          title: Nombre de usuario
          description: Nombre de usuario de acceso a la aplicación
          type: string
          maxLength: 80
          minLength: 1
          example: john.doe
        password:
          title: Contraseña
          description: Constraseña empleada por el usuario para el acceso a la aplicación
          type: string
          maxLength: 80
          minLength: 1
          example: 1234abc
        enabled:
          title: Habilitado
          description: Indica si el usuario está habilitado
          type: boolean
          example: true
        authorities:
          title: Authorities
          description: The authorities of an user
          type: array
          items:
            type: string
      required:
        - username
        - password